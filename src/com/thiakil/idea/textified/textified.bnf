{
  parserClass="com.thiakil.idea.parser.TextifiedAsmParser"
  parserUtilClass="com.thiakil.idea.parser.TextifiedAsmParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TextifiedAsm"
  psiImplClassSuffix="Impl"
  psiPackage="com.thiakil.idea.psi"
  psiImplPackage="com.thiakil.idea.impl"

  elementTypeHolderClass="com.thiakil.idea.psi.TextifiedAsmTypes"
  elementTypeClass="com.thiakil.idea.psi.TextifiedAsmElementType"
  tokenTypeClass="com.thiakil.idea.psi.TextifiedAsmTokenType"
  psiImplUtilClass="com.thiakil.idea.parser.TextifiedAsmParserUtil"
  //recoverWhile="LINEFEED"
  tokens=[
    comment='regexp:(//.*|/\*(.|\n|\r)*?\*/)'
    //REFERENCE_ARRAY='regexp:([\[]+L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;)'
    //PRIMITIVE_ARRAY='regexp:([\[]+)'
    //TYPE='regexp:(\[*([BCDFIJSZ]|L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*;))'
    //RESULT_TYPE='regexp:(\[*([BCDFIJSZV]|L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*;))'
    //ARRAY_BRACE='regexp:(\[+)'
    //PRIMITIVE_TYPE='regexp:([BCDFIJSZ])'
    //RESULT_PRIMITIVE='regexp:([BCDFIJSZV])'
    REFERENCE_TYPE='regexp:(L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;)'
    REFERENCE_TYPE_ARRAY='regexp:\[+(L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;)'
    DESC_PRIMITIVE='regexp:\[*([BCDFIJSZV])'
    //DESC2='regexp:\[*([BCDFIJSZ]|(L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;))'
    METHOD_DESC_TOKEN='regexp:\(\[*([BCDFIJSZ]|L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;)*\)\[*([BCDFIJSZV]|L([a-zA-Z\$_][a-zA-Z0-9\$_]*/)*[a-zA-Z\$_][a-zA-Z0-9\$_]*?;)'
    //METHOD_DESC='regexp:\(({DESC}|{REFERENCE_TYPE})*\)({DESC}|{REFERENCE_TYPE}|V)'
    LABEL_ID='regexp:(L\d+)'
    TYPE_NAME='regexp:(([a-zA-Z\$_][a-zA-Z0-9\$_]*/)+[a-zA-Z\$_][a-zA-Z0-9\$_]*)'
    identifier='regexp:([a-zA-Z\$_][a-zA-Z0-9\$_]*)'
    number='regexp:(-?\d+(\.\d*)?)'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    WHITE_SPACE='regexp:\s+'
    GROUP_OPENER='['
    GROUP_CLOSER=']'
  ]
  //implements("TYPE")="com.thiakil.idea.psi.PsiDescElement"
}

asmFile ::= TYPE_DECLARATION*

CONSTANT ::= string | number | true | false | CLASS_CONSTANT

private CLASS_CONSTANT ::= REFERENCE_TYPE ".class"

CLASS_DECLARATION ::= CLASS_MODIFIERS? class CLASS_TYPE SUPER? INTERFACES? {pin=2}

CLASS_DEFINITION ::= CLASS_DECLARATION "{" CLASS_BODY "}"

INNER_CLASS_DECLARATION ::= INNER_CLASS_MODIFIERS* INNERCLASS CLASS_TYPE CLASS_TYPE CLASS_TYPE {pin=2}

INNER_CLASS_MODIFIERS ::= CLASS_MODIFIER |  FIELD_MODIFIER

private TYPE_DECLARATION ::= CLASS_DEFINITION | INTERFACE_DECLARATION

private CLASS_MODIFIERS ::= CLASS_MODIFIER*

CLASS_MODIFIER ::= public | abstract | final | enum

SUPER ::= extends CLASS_TYPE {pin=1}

INTERFACES ::= implements INTERFACE_TYPE_LIST {pin=1}

INTERFACE_TYPE_LIST ::= INTERFACE_TYPE+

CLASS_BODY ::= CLASS_BODY_DECLARATION*

FIELD_DECLARATION ::= FIELD_MODIFIER* TYPE identifier FIELD_INITIALISER? ANNOTATION_ELEMENT* {pin=2}

FIELD_INITIALISER ::= "=" FIELD_INITIALISER_VALUE {pin=1}

FIELD_INITIALISER_VALUE ::= string | number

FIELD_MODIFIER ::= public | protected | private | static | final | transient | volatile | synthetic

METHOD_DECLARATION ::= METHOD_HEADER METHOD_BODY? {methods=[desc="METHOD_DESC" getName] mixin="com.thiakil.idea.mixin.MethodDeclarationMixin"}

private METHOD_HEADER ::= METHOD_MODIFIER* METHOD_DECLARATOR THROWS? ANNOTATION_ELEMENT* {pin=2}

METHOD_MODIFIER ::= public | protected | private | static | abstract | final | synchronized | native | synthetic | bridge | default

private METHOD_DECLARATOR ::= METHOD_IDENTIFIER METHOD_DESC

METHOD_DESC ::= METHOD_DESC_TOKEN

private METHOD_PARAM ::= '(' FORMAL_PARAMETER* ')' //{recoverWhile="PARAM_RECOVER" pin=1}

private PARAM_RECOVER ::= !(FORMAL_PARAMETER | ')')

METHOD_IDENTIFIER ::= identifier | "<init>" | "<clinit>"

METHOD_BODY ::= METHOD_BODY_ELEMENT+ LOCAL_VARIABLES? MAX_ELS*

private MAX_ELS ::= MAX_STACK | MAX_LOCALS

LOCAL_VARIABLES ::= LOCAL_VARIABLE+

LABEL_REF ::= LABEL_ID

LOCAL_VARIABLE ::= LOCALVARIABLE identifier TYPE LABEL_REF LABEL_REF number {methods=[VariableName="identifier" startLabel="LABEL_REF[0]" endLabel="LABEL_REF[1]" index="number"] pin=1}

MAX_STACK ::= MAXSTACK "=" number {pin=1}

MAX_LOCALS ::= MAXLOCALS "=" number{pin=1}

FORMAL_PARAMETER ::= TYPE | identifier

THROWS ::= "throws" CLASS_TYPE_LIST

private CLASS_BODY_DECLARATION ::= INNER_CLASS_DECLARATION | FIELD_DECLARATION | METHOD_DECLARATION | ANNOTATION_ELEMENT

CLASS_TYPE_LIST ::= CLASS_TYPE+

INTERFACE_DECLARATION ::= INTERFACE_MODIFIERS interface INTERFACE_TYPE EXTENDS_INTERFACES? "{" INTERFACE_BODY "}"

INTERFACE_MODIFIERS ::= INTERFACE_MODIFIER*

private INTERFACE_MODIFIER ::= public | abstract

EXTENDS_INTERFACES ::= implements INTERFACE_TYPE+

INTERFACE_BODY ::= INTERFACE_MEMBER_DECLARATION*

private INTERFACE_MEMBER_DECLARATION ::= CONSTANT_DECLARATION | METHOD_DECLARATION | ANNOTATION_ELEMENT

CONSTANT_DECLARATION ::= CONSTANT_MODIFIER* TYPE identifier

CONSTANT_MODIFIER ::= public | static | final

TYPE ::= DESC_PRIMITIVE | REFERENCE_TYPE | REFERENCE_TYPE_ARRAY//{methods=[getDescElements]}

CLASS_TYPE ::= TYPE_NAME | identifier

INTERFACE_TYPE ::= TYPE_NAME | identifier

ANNOTATION_ELEMENT ::= "@" REFERENCE_TYPE "(" ANNOTATION_ARGS? ")" {pin=1}

ANNOTATION_ARGS ::= (ANNOTATION_ARG ",")* ANNOTATION_ARG

ANNOTATION_ARG ::= ANNOTATION_KEY "=" ANNOTATION_VALUE {pin=2}

ANNOTATION_KEY ::= identifier

ANNOTATION_VALUE ::= CONSTANT | ANNOTATION_ARRAY | STATIC_FIELD_REF

ANNOTATION_ARRAY ::= "{" ANNOTATION_ARRAY_VALUES* "}"

STATIC_FIELD_REF ::= REFERENCE_TYPE "." identifier

private ANNOTATION_ARRAY_VALUES ::= (ANNOTATION_ARRAY_VALUE ',')* ANNOTATION_ARRAY_VALUE

ANNOTATION_ARRAY_VALUE ::= ANNOTATION_VALUE | ANNOTATION_ELEMENT

private METHOD_BODY_ELEMENT ::= LABEL_DECLARATION | INSTRUCTION_KIND {recoverWhile="METHOD_RECOVERY"}

private METHOD_RECOVERY ::= !("}" | LABEL_DECLARATION | INSTRUCTION_KIND | LOCAL_VARIABLE | MAX_LOCALS | MAX_STACK)

LABEL_DECLARATION ::= LABEL_ID

private INSTRUCTION_KIND ::= INSTRUCTION | INSTRUCTION_WITH_ARGS

INSTRUCTION ::= NOP | ACONST_NULL | ICONST_M1 | ICONST_0 | ICONST_1 | ICONST_2 | ICONST_3 | ICONST_4 | ICONST_5 | LCONST_0 | LCONST_1 | FCONST_0 | FCONST_1 | FCONST_2 | DCONST_0 | DCONST_1 | IALOAD | LALOAD | FALOAD | DALOAD | AALOAD | BALOAD | CALOAD | SALOAD | IASTORE | LASTORE | FASTORE | DASTORE | AASTORE | BASTORE | CASTORE | SASTORE | POP | POP2 | DUP | DUP_X1 | DUP_X2 | DUP2 | DUP2_X1 | DUP2_X2 | SWAP | IADD | LADD | FADD | DADD | ISUB | LSUB | FSUB | DSUB | IMUL | LMUL | FMUL | DMUL | IDIV | LDIV | FDIV | DDIV | IREM | LREM | FREM | DREM | INEG | LNEG | FNEG | DNEG | ISHL | LSHL | ISHR | LSHR | IUSHR | LUSHR | IAND | LAND | IOR | LOR | IXOR | LXOR | I2L | I2F | I2D | L2I | L2F | L2D | F2I | F2L | F2D | D2I | D2L | D2F | I2B | I2C | I2S | LCMP | FCMPL | FCMPG | DCMPL | DCMPG | IRETURN | LRETURN | FRETURN | DRETURN | ARETURN | RETURN | ARRAYLENGTH | ATHROW | MONITORENTER | MONITOREXIT

private INSTRUCTION_WITH_ARGS ::= LINE_NUMBER | NEW_INSN | LDC_INSN | LOAD_LOCAL_INSN | INVOKE_METHOND_INSN | PUSH_INSN | FIELD_INSN | NEW_ARRAY_INSN | STORE_LOCAL_INSN | INVOKEDYNAMIC_INSN | FLOW_CONTROL_INSNS | INC_INSN | RET_INSN | INSTANCEOF_INSN | CHECKCAST_INSN

private FLOW_CONTROL_INSNS ::= TRYCATCH | JUMP_INSN | FRAME_INSN | TABLESWITCH_INSN

RET_INSN ::= RET number

LINE_NUMBER ::= LINENUMBER number LABEL_ID {pin=1}

NEW_INSN ::= NEW TYPE_NAME {pin=1}

LDC_INSN ::= LDC CONSTANT {pin=1}

LOAD_LOCAL_INSN ::= (ILOAD | LLOAD | FLOAD | DLOAD | ALOAD) number {pin=1}

STORE_LOCAL_INSN ::= (ISTORE | LSTORE | FSTORE | DSTORE | ASTORE) number {pin=1}

INVOKE_METHOND_INSN ::= METHOD_INSN_OPCODE  CLASS_TYPE "." METHOD_IDENTIFIER METHOD_DESC {methods=[owner="CLASS_TYPE" methodName="METHOD_IDENTIFIER" desc="METHOD_DESC"] pin=1}

METHOD_INSN_OPCODE ::= INVOKESPECIAL | INVOKESTATIC | INVOKEVIRTUAL | INVOKEINTERFACE

INVOKEDYNAMIC_INSN ::= INVOKEDYNAMIC METHOD_IDENTIFIER METHOD_DESC "[" HANDLE_REF INVOKEDYNAMIC_ARG_LIST "]" {pin=1}

INVOKEDYNAMIC_ARG_LIST ::= (INVOKEDYNAMIC_ARG ",")* INVOKEDYNAMIC_ARG

INVOKEDYNAMIC_ARG ::= (HANDLE_REF | HANDLE_ARGUMENTS)

HANDLE_ARGUMENTS ::= METHOD_DESC

HANDLE_REF ::= CLASS_TYPE "." identifier METHOD_DESC

PUSH_INSN ::= (BIPUSH | SIPUSH) number {pin=1}

FIELD_INSN ::= FIELD_INSN_OPCODE CLASS_TYPE "." identifier ":" TYPE {methods=[owner="CLASS_TYPE" fieldName="identifier" desc="TYPE"] pin=1}

FIELD_INSN_OPCODE ::= PUTFIELD | GETFIELD | GETSTATIC | PUTSTATIC

NEW_ARRAY_INSN ::= NEW_REFERENCE_ARRAY | NEW_PRIMITIVE_ARRAY

private NEW_REFERENCE_ARRAY ::= ANEWARRAY CLASS_TYPE {pin=1}

private NEW_PRIMITIVE_ARRAY ::= NEWARRAY PRIMITIVE_ARRAY_TYPE {pin=1}

PRIMITIVE_ARRAY_TYPE ::= T_BOOLEAN|T_CHAR|T_FLOAT|T_DOUBLE|T_BYTE|T_SHORT|T_INT|T_LONG

TRYCATCH ::= TRYCATCHBLOCK LABEL_REF LABEL_REF LABEL_REF CLASS_TYPE {pin=1}

JUMP_INSN ::= JUMP_OPCODE LABEL_REF {pin=1}

JUMP_OPCODE ::= IFEQ | IFNE | IFLT | IFGE | IFGT | IFLE | IF_ICMPEQ | IF_ICMPNE | IF_ICMPLT | IF_ICMPGE | IF_ICMPGT | IF_ICMPLE | IF_ACMPEQ | IF_ACMPNE | GOTO | JSR | IFNULL | IFNONNULL

FRAME_INSN ::= FRAME FRAME_KIND {pin=1}

private FRAME_KIND ::= FRAME_SAME | FRAME_FULL_NEW | FRAME_APPEND | FRAME_SAME1 | FRAME_CHOP

FRAME_SAME ::= SAME

FRAME_SAME1 ::= SAME1 FRAME_TYPE

FRAME_CHOP ::= CHOP CHOP_AMOUNT
CHOP_AMOUNT ::= number

FRAME_FULL_NEW ::= (FULL | NEW) FRAME_TYPES_LIST FRAME_TYPES_LIST {pin=1}

FRAME_TYPES_LIST ::= GROUP_OPENER FRAME_TYPE* GROUP_CLOSER {recoverWhile=FRAME_TYPES_LIST_RECOVER pin=1}

private FRAME_TYPES_LIST_RECOVER ::= !( GROUP_OPENER | GROUP_CLOSER | LABEL_DECLARATION |INSTRUCTION_KIND | LOCAL_VARIABLES| MAX_ELS | METHOD_MODIFIER | FIELD_MODIFIER | "}" )

FRAME_TYPE ::= CLASS_TYPE | DESC_PRIMITIVE

FRAME_APPEND ::= APPEND FRAME_TYPES_LIST {pin=1}

INC_INSN ::= IINC VAR_INDEX INC_AMOUNT

VAR_INDEX ::= number
INC_AMOUNT ::= number

INSTANCEOF_INSN ::= INSTANCEOF CLASS_TYPE

CHECKCAST_INSN ::= CHECKCAST CLASS_TYPE

TABLESWITCH_INSN ::= TABLESWITCH TABLESWITCH_LABELS TABLESWITCH_DEFAULT {pin=1}

private TABLESWITCH_LABELS ::= TABLESWITCH_LABEL+

TABLESWITCH_LABEL ::= number ":" LABEL_REF

TABLESWITCH_DEFAULT ::= default ":" LABEL_REF